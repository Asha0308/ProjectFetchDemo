import React, {useState} from "react";
import './fetch.css';

//  Callback Functions
const getData = async (endpoint: string) => {
  const response = await fetch(endpoint)
  const data: UserResults = await response.json()
  return data
}

const parseUserData = (user: Result) => {
  const { name, email } = user
  return { 
    name: `${name.first} ${name.last}`, 
    email, 
  }
}

const generateUserCard = (user: TUser, key: number) => {
  const { name, email } = user
  return (
    <div key={key} className="card" >
        <div>
          <b>Name:</b>
          <span>{name}</span>
        </div>
        <div>
          <b>Email:</b>
          <span>{email}</span>
        </div>
    </div>
  )
}

// React Components
const Fetch : React.FC = () => {
  const [state, setState] = useState({ 
    users:  [], 
    greeting: 'Fetching Data Using React and TypeScript' 
  })
  
  const fetchUsers = async () => {
     const userData = await getData('https://randomuser.me/api/?results=21')
     const results = userData.results
     const users = results.map(parseUserData)
     //@ts-ignore
     return setState({ ...state, users: [...users] })
  }
  
  const { greeting, users } = state
  const hasUsers = users.length > 0
  return (
    <div>
      <h1  className="title">{greeting}</h1>
      <button onClick={()=> fetchUsers()}>Fetch Users</button>
      <div>
        { hasUsers ? <Users users={users} /> : null }
      </div>
    </div>
  )
}

const Users = ({ users }: TUserProps) => {
  const hasUsers = users !== undefined
  return (
    <div className="container">
      {hasUsers ? users.map(generateUserCard) : null}
    </div>
  )
}


// Types Generated by https://quicktype.io
type TUserProps = { users: TUser[] | undefined }
type TUser = {
  name: string
  email: string
  age: string
}

interface UserResults {
  results: Result[];
  info:    Info;
}

interface Info {
  seed:    string;
  results: number;
  page:    number;
  version: string;
}

interface Result {
  gender:     Gender;
  name:       Name;
  location:   Location;
  email:      string;
  login:      Login;
  dob:        Dob;
  registered: Dob;
  phone:      string;
  cell:       string;
  id:         ID;
  picture:    Picture;
  nat:        string;
}

interface Dob {
  date: string;
  age:  number;
}

enum Gender {
  Female = "female",
  Male = "male",
}

interface ID {
  name:  string;
  value: null | string;
}

interface Location {
  street:      string;
  city:        string;
  state:       string;
  postcode:    number | string;
  coordinates: Coordinates;
  timezone:    Timezone;
}

interface Coordinates {
  latitude:  string;
  longitude: string;
}

interface Timezone {
  offset:      string;
  description: string;
}

interface Login {
  uuid:     string;
  username: string;
  password: string;
  salt:     string;
  md5:      string;
  sha1:     string;
  sha256:   string;
}

interface Name {
  title: string;
  first: string;
  last:  string;
}

interface Picture {
  large:     string;
  medium:    string;
  thumbnail: string;
}

export default Fetch;